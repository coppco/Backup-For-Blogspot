<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>coppco的博客</title>
  <subtitle>记录iOS和Swift点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-07-18T01:25:05.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>coppco</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cocoapods 2016-7-18安装使用淘宝镜像安装错误</title>
    <link href="http://yoursite.com/2016/07/18/Cocoapods-2016-7-18%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2016/07/18/Cocoapods-2016-7-18安装使用淘宝镜像安装错误/</id>
    <published>2016-07-18T01:04:24.000Z</published>
    <updated>2016-07-18T01:25:05.000Z</updated>
    
    <content type="html">&lt;p&gt;14年年底装的黑苹果最近太卡了,然后系统版本又不支持最新的Xcode,所以决定新装一个mac OS 10.10系统, 黑苹果安装最麻烦的就是驱动了,具体安装步骤这里就不赘述了.&lt;br&gt;安装完系统,怎么能少了Cocoapods这个神器呢, 安装网上的步骤一步一步Ruby使用淘宝镜像,但是到了最后安装cocoapods的时候&lt;code&gt;sudo gem install cocoapods&lt;/code&gt;&lt;br&gt;报错了,错误如下:证书验证失败&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error fetching &lt;a href=&quot;https://ruby.taobao.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ruby.taobao.org&lt;/a&gt;:&lt;br&gt;SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (&lt;a href=&quot;https://rubygems-china.oss-cn-hangzhou.aliyuncs.com/specs.4.8.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://rubygems-china.oss-cn-hangzhou.aliyuncs.com/specs.4.8.gz&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后网上搜索了一下:解决方法就是使用Ruby默认源,最后安装成功,至于为什么使用淘宝镜像会失败,原因未知,这里只是解决办法:不使用淘宝终端,打开终端依次输入下面命令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;移除现有Ruby淘宝镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;gem sources –remove &lt;a href=&quot;https://ruby.taobao.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ruby.taobao.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用Ruby默认源&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;gem sources -a &lt;a href=&quot;https://rubygems.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://rubygems.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;验证新源是否替换成功&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;gem sources -l&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果终端显示&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; CURRENT SOURCES &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rubygems.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://rubygems.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即为成功了, 最后再次执行&lt;code&gt;sudo gem install cocoapods&lt;/code&gt;即可安装成功&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;14年年底装的黑苹果最近太卡了,然后系统版本又不支持最新的Xcode,所以决定新装一个mac OS 10.10系统, 黑苹果安装最麻烦的就是驱动了,具体安装步骤这里就不赘述了.&lt;br&gt;安装完系统,怎么能少了Cocoapods这个神器呢, 安装网上的步骤一步一步Ruby使用淘
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="坑点" scheme="http://yoursite.com/tags/%E5%9D%91%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>浅谈iOS中#if、#ifdef、#ifndef的使用误区</title>
    <link href="http://yoursite.com/2016/07/15/%E6%B5%85%E8%B0%88iOS%E4%B8%AD-if%E3%80%81-ifdef%E3%80%81-ifndef%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%AF%E5%8C%BA/"/>
    <id>http://yoursite.com/2016/07/15/浅谈iOS中-if、-ifdef、-ifndef的使用误区/</id>
    <published>2016-07-15T07:51:52.000Z</published>
    <updated>2016-07-15T10:21:01.000Z</updated>
    
    <content type="html">&lt;p&gt;最近看了好多Objective-C代码,发现很多人使用了#if、#ifdef、#idndef来解决适配的问题,但是却存在使用的误区,所以有感而发!对于这个可能大家都知道它是条件编译,即对代码选择性进行编译,相信项目中或多或少都有使用.&lt;/p&gt;
&lt;p&gt;而下面我举个栗子来说明它的一个使用误区:iOS8.0 以后新出的注册远程通知来说吧, iOS8.0 之前是这样的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;font color=&quot;orange&quot;&gt;UIRemoteNotificationType myTypes = UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound;&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;orange&quot;&gt;[[UIApplication sharedApplication] registerForRemoteNotificationTypes:myTypes];&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;而iOS8.0以后,是这样注册通知的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;font color=&quot;orange&quot;&gt;UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeBadge|UIUserNotificationTypeSound|UIUserNotificationTypeAlert categories:nil];&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;orange&quot;&gt;[[UIApplication sharedApplication] registerUserNotificationSettings:settings];&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;orange&quot;&gt;[[UIApplication sharedApplication] registerForRemoteNotifications];&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;于是就看到有人使用类似的写法了:&lt;/p&gt;
&lt;blockquote&gt;
&lt;font color=&quot;orange&quot;&gt;#import Availability.h&lt;br&gt;#ifdef __IPHONE_8_0&lt;br&gt;　　UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeBadge | UIUserNotificationTypeSound | UIUserNotificationTypeAlert categories:nil];&lt;br&gt;　　[[UIApplication sharedApplication] registerUserNotificationSettings:settings];&lt;br&gt;　　[[UIApplication sharedApplication] registerForRemoteNotifications];&lt;br&gt;#else&lt;br&gt;　　UIRemoteNotificationType myTypes = UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound;&lt;br&gt;　　[[UIApplication sharedApplication] registerForRemoteNotificationTypes:myTypes];&lt;br&gt;#endif&lt;/font&gt;


&lt;/blockquote&gt;
&lt;p&gt;这里Availability.h是导入的一个系统头文件,里面有一些这样的宏.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define __IPHONE_7_1     70100
#define __IPHONE_8_0     80000
#define __IPHONE_8_1     80100
#define __IPHONE_8_2     80200
#define __IPHONE_8_3     80300
#define __IPHONE_8_4     80400
#define __IPHONE_9_0     90000
#define __IPHONE_9_1     90100
#define __IPHONE_9_2     90200
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而条件编译就是根据不同的条件来选择性的编译某些代码,在Xcod中它和Xcode的编辑SDK版本有关系,在Targets—–Bulid Setting —- Base SDK 中可以看到选择编译的SDK版本,如果此时选择使用iOS 9.2版本编译打包ipa,那么安装在系统版本iOS 8.0以前的手机上就会crash. 原因:使用的是iOS 9.2 SDK编译的, __IPHONE_8_0肯定是定义过的,所以else后面的代码就不会参与编译, 在iOS8.0 以前的版本使用8.0以后的API引起crash.&lt;/p&gt;
&lt;h1 id=&quot;总结-从这个栗子可以看出-条件编译只是在选择性的编译代码-它不能替代运行时判断-所以需要做适配的程序员一定要注意-条件编译不能完全替代运行时-有些判断还是需要的如&quot;&gt;&lt;a href=&quot;#总结-从这个栗子可以看出-条件编译只是在选择性的编译代码-它不能替代运行时判断-所以需要做适配的程序员一定要注意-条件编译不能完全替代运行时-有些判断还是需要的如&quot; class=&quot;headerlink&quot; title=&quot;总结:从这个栗子可以看出,条件编译只是在选择性的编译代码,它不能替代运行时判断,所以需要做适配的程序员一定要注意,条件编译不能完全替代运行时,有些判断还是需要的如:&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;总结:从这个栗子可以看出,条件编译只是在选择性的编译代码,它不能替代运行时判断,所以需要做适配的程序员一定要注意,条件编译不能完全替代运行时,有些判断还是需要的如:&lt;/font&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;font color=&quot;orange&quot;&gt;if ([UIDevice currentDevice].systemVersion.floatValue &amp;gt;= 8.0) {&lt;br&gt;　//code&lt;br&gt;} else {&lt;br&gt;　//code&lt;br&gt;}&lt;/font&gt;

&lt;/blockquote&gt;
&lt;h1 id=&quot;条件编译适用于一旦编译就不会变化的情况-或者使用条件编译解决使用低版本SDK编译时-高版本SDK里面API报错问题-例如-程序中NSLog很多-但是不希望发布release版本的时候打印-是可以使用条件编译的&quot;&gt;&lt;a href=&quot;#条件编译适用于一旦编译就不会变化的情况-或者使用条件编译解决使用低版本SDK编译时-高版本SDK里面API报错问题-例如-程序中NSLog很多-但是不希望发布release版本的时候打印-是可以使用条件编译的&quot; class=&quot;headerlink&quot; title=&quot;条件编译适用于一旦编译就不会变化的情况,或者使用条件编译解决使用低版本SDK编译时,高版本SDK里面API报错问题,例如:程序中NSLog很多,但是不希望发布release版本的时候打印,是可以使用条件编译的&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;条件编译适用于一旦编译就不会变化的情况,或者使用条件编译解决使用低版本SDK编译时,高版本SDK里面API报错问题,例如:程序中NSLog很多,但是不希望发布release版本的时候打印,是可以使用条件编译的&lt;/font&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;#ifdef DEBUG&lt;br&gt;#define XHJLog(FORMAT, …) NSLog(@”%@:%d行   \n%@”, [[NSString stringWithUTF8String:&lt;strong&gt;FILE&lt;/strong&gt;] lastPathComponent], &lt;strong&gt;LINE&lt;/strong&gt;, [NSString stringWithFormat:FORMAT, ##&lt;strong&gt;VA_ARGS&lt;/strong&gt;])&lt;br&gt;#else&lt;br&gt;#define XHJLog(FORMAT, …) nil&lt;br&gt;#endif&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;备注-有什么错误或者遗漏的地方请告知我-coppco-qq-com&quot;&gt;&lt;a href=&quot;#备注-有什么错误或者遗漏的地方请告知我-coppco-qq-com&quot; class=&quot;headerlink&quot; title=&quot;备注:有什么错误或者遗漏的地方请告知我,coppco@qq.com&quot;&gt;&lt;/a&gt;备注:有什么错误或者遗漏的地方请告知我,coppco@qq.com&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了好多Objective-C代码,发现很多人使用了#if、#ifdef、#idndef来解决适配的问题,但是却存在使用的误区,所以有感而发!对于这个可能大家都知道它是条件编译,即对代码选择性进行编译,相信项目中或多或少都有使用.&lt;/p&gt;
&lt;p&gt;而下面我举个栗子来说明它
    
    </summary>
    
    
      <category term="坑点" scheme="http://yoursite.com/tags/%E5%9D%91%E7%82%B9/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>第一个微博</title>
    <link href="http://yoursite.com/2016/07/14/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BE%AE%E5%8D%9A/"/>
    <id>http://yoursite.com/2016/07/14/第一个微博/</id>
    <published>2016-07-14T10:37:52.000Z</published>
    <updated>2016-07-15T07:59:56.000Z</updated>
    
    <content type="html">&lt;p&gt;由于hexo使用的是markdown格式的文件,而我又不会使用markdown,所以第一篇微博就来学习一下markdown的使用和hexo的一些命令吧!&lt;/p&gt;
&lt;h1 id=&quot;Markdown的基本语法&quot;&gt;&lt;a href=&quot;#Markdown的基本语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown的基本语法&quot;&gt;&lt;/a&gt;Markdown的基本语法&lt;/h1&gt;&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;1、分段&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:    两个回车  &lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;2、换行&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:    两个空格 + 回车&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;3、标题&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:    可以使用#或者文字下一行使用==或–&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方式1,使用# ~ ###### 文字,注意#与文字中间有空格&lt;br&gt;&lt;code&gt;# 1级标题&lt;/code&gt;&lt;br&gt;&lt;code&gt;## 2级标题&lt;/code&gt;&lt;br&gt;&lt;code&gt;### 3级标题&lt;/code&gt;&lt;br&gt;&lt;code&gt;#### 4级标题&lt;/code&gt;&lt;br&gt;&lt;code&gt;##### 5级标题&lt;/code&gt;&lt;br&gt;&lt;code&gt;###### 6级标题&lt;/code&gt;&lt;br&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;h1 id=&quot;1级标题&quot;&gt;&lt;a href=&quot;#1级标题&quot; class=&quot;headerlink&quot; title=&quot;1级标题&quot;&gt;&lt;/a&gt;1级标题&lt;/h1&gt;&lt;h2 id=&quot;2级标题&quot;&gt;&lt;a href=&quot;#2级标题&quot; class=&quot;headerlink&quot; title=&quot;2级标题&quot;&gt;&lt;/a&gt;2级标题&lt;/h2&gt;&lt;h3 id=&quot;3级标题&quot;&gt;&lt;a href=&quot;#3级标题&quot; class=&quot;headerlink&quot; title=&quot;3级标题&quot;&gt;&lt;/a&gt;3级标题&lt;/h3&gt;&lt;h4 id=&quot;4级标题&quot;&gt;&lt;a href=&quot;#4级标题&quot; class=&quot;headerlink&quot; title=&quot;4级标题&quot;&gt;&lt;/a&gt;4级标题&lt;/h4&gt;&lt;h5 id=&quot;5级标题&quot;&gt;&lt;a href=&quot;#5级标题&quot; class=&quot;headerlink&quot; title=&quot;5级标题&quot;&gt;&lt;/a&gt;5级标题&lt;/h5&gt;&lt;h6 id=&quot;6级标题&quot;&gt;&lt;a href=&quot;#6级标题&quot; class=&quot;headerlink&quot; title=&quot;6级标题&quot;&gt;&lt;/a&gt;6级标题&lt;/h6&gt;&lt;/li&gt;
&lt;li&gt;方式2, 使用=和-&lt;br&gt;&lt;code&gt;使用==&lt;/code&gt;&lt;br&gt;&lt;code&gt;==&lt;/code&gt;&lt;br&gt;&lt;code&gt;使用--&lt;/code&gt;&lt;br&gt;&lt;code&gt;--&lt;/code&gt;&lt;br&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用==&quot;&gt;&lt;/a&gt;使用==&lt;/h1&gt;&lt;h2 id=&quot;使用–&quot;&gt;&lt;a href=&quot;#使用–&quot; class=&quot;headerlink&quot; title=&quot;使用–&quot;&gt;&lt;/a&gt;使用–&lt;/h2&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;4、粗体和斜体&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:    _*一个包裹的是斜体, 两个包裹的是粗体。&lt;br&gt;&lt;code&gt;_斜体_&lt;/code&gt;&lt;br&gt;&lt;code&gt;__粗体__&lt;/code&gt;&lt;br&gt;&lt;code&gt;*斜体*&lt;/code&gt;&lt;br&gt;&lt;code&gt;**粗体**&lt;/code&gt;&lt;br&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;br&gt;&lt;em&gt;斜体&lt;/em&gt;  &lt;strong&gt;粗体&lt;/strong&gt;  &lt;em&gt;斜体&lt;/em&gt;  &lt;strong&gt;粗体&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;5、引用&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:    通过在文字开头添加 &amp;gt; 来表示。  (当 &amp;gt; 和文字之间添加五个空格blank时,样式会变化,变成黑底)&lt;br&gt;&lt;code&gt;&amp;gt;引用无空格&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;gt;     引用五个空格&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;gt;引用文字&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;gt;&amp;gt;引用文字, 前面两个空格&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;gt;引用文字&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引用无空格  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;引用五个格  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;引用文字&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引用文字&lt;br&gt;引用文字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;6、代码区域&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:    四个空格开头或者使用`把代码包住    (这个是~下面的符号,不是单引号)&lt;br&gt;&lt;code&gt;代码前面四个空格&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (void)applicationDidFinishLaunching:(NSNotification *)notification {
[self connect];
}

- (void)applicationWillTerminate:(NSNotification *)notification {
[self disconnect];
}

- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(NSApplication *)application {
return YES;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;br&gt;    使用`(~下方的符号)把代码包住&lt;br&gt;&lt;code&gt;Swift&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;7、列表&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:    *   +   -是无序列表,1. 是有序列表, 注意后面都是有空格。&lt;br&gt;&lt;code&gt;* 无序*&lt;/code&gt;&lt;br&gt;&lt;code&gt;+ 无序+&lt;/code&gt;&lt;br&gt;&lt;code&gt;- 无序-&lt;/code&gt;&lt;br&gt;&lt;code&gt;1. 有序数字.&lt;/code&gt;&lt;br&gt;&lt;code&gt;- 外层列表&lt;/code&gt;&lt;br&gt;  &lt;code&gt;+ 内层列表+前面有两个空格&lt;/code&gt;&lt;br&gt;  &lt;code&gt;+ 内层列表+前面有两个空格&lt;/code&gt;&lt;br&gt;&lt;code&gt;- 外层列表&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无序*&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;无序+&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;无序-&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;有序1.  &lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;外层列表项目&lt;ul&gt;
&lt;li&gt;内层列表项目&lt;/li&gt;
&lt;li&gt;内层列表项目&lt;/li&gt;
&lt;li&gt;内层列表项目&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外层列表项目&lt;br&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;8、链接Links&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:    Markdown中有两种方式，实现链接，分别为内联方式和引用方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;内联方式&lt;br&gt;&lt;code&gt;不会的问题请先[百度一下](www.baidu.com),再请教别人!&lt;/code&gt;&lt;br&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;br&gt;不会的问题请先&lt;a href=&quot;www.baidu.com&quot;&gt;百度一下&lt;/a&gt;,再请教别人!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引用方式&lt;br&gt;&lt;code&gt;欢迎访问我的[github][1]和[简书][2]。&lt;/code&gt;&lt;br&gt;&lt;code&gt;[1]: https://github.com/coppco/        &amp;quot;github&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;code&gt;[2]: http://www.jianshu.com/users/04289820b712/timeline/   &amp;quot;简书&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;br&gt;欢迎访问我的&lt;a href=&quot;https://coppco.github.io/assets/blogImg/coppco.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;和&lt;a href=&quot;http://www.jianshu.com/users/04289820b712/timeline/&quot; title=&quot;简书&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;9、图片image&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:    图片和链接类似,有内联方式和引用方式, 地址可以是本地文件也可以是网络URL。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内联方式使用,本地图片&lt;br&gt;&lt;code&gt;![本地头像](/assets/blogImg/coppco.png)&lt;/code&gt;&lt;br&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;br&gt;&lt;img src=&quot;/assets/blogImg/coppco.png&quot; alt=&quot;本地头像&quot;&gt;&lt;/li&gt;
&lt;li&gt;引用方式,使用网络图片&lt;br&gt;&lt;code&gt;![网络图片][1]&lt;/code&gt;&lt;br&gt;&lt;code&gt;[1]: https://coppco.github.io/assets/blogImg/coppco.png&lt;/code&gt;&lt;br&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;br&gt;&lt;img src=&quot;https://coppco.github.io/assets/blogImg/coppco.png&quot; alt=&quot;网络图片&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;10、脚注&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:&lt;br&gt;&lt;code&gt;这里是脚注[^这里是脚注]&lt;/code&gt;&lt;br&gt;&lt;code&gt;[^这里是脚注]: 在这里&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;br&gt;这里是脚注&lt;a href=&quot;在这里&quot;&gt;^这里是脚注&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;11、分割线&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:&lt;br&gt;&lt;code&gt;---&lt;/code&gt;&lt;br&gt;&lt;code&gt;***&lt;/code&gt;&lt;br&gt;&lt;code&gt;~~文字删除线~~&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;预览&quot;&gt;&lt;a href=&quot;#预览&quot; class=&quot;headerlink&quot; title=&quot;预览:&quot;&gt;&lt;/a&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;del&gt;文字删除线&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;12、转义字符&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:   一些特殊字符如 *  [ &gt;等前面添加\&lt;br&gt;&lt;code&gt;\\&lt;/code&gt;&lt;br&gt;    \`&lt;br&gt;&lt;code&gt;\*&lt;/code&gt;&lt;br&gt;&lt;code&gt;\_&lt;/code&gt;&lt;br&gt;&lt;code&gt;\{\}&lt;/code&gt;&lt;br&gt;&lt;code&gt;\[\]&lt;/code&gt;&lt;br&gt;&lt;code&gt;\(\)&lt;/code&gt;&lt;br&gt;&lt;code&gt;\#&lt;/code&gt;&lt;br&gt;&lt;code&gt;\+&lt;/code&gt;&lt;br&gt;&lt;code&gt;\-&lt;/code&gt;&lt;br&gt;&lt;code&gt;\.&lt;/code&gt;&lt;br&gt;&lt;code&gt;\!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;br&gt;\&lt;br&gt;`&lt;br&gt;*&lt;br&gt;_&lt;br&gt;{}&lt;br&gt;[]&lt;br&gt;()&lt;br&gt;#&lt;br&gt;+&lt;br&gt;-&lt;br&gt;.&lt;br&gt;!&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;13、小型文字&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:&lt;br&gt;&lt;code&gt;&amp;lt;small&amp;gt;文本内容&amp;lt;/small&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;预览&lt;/strong&gt;:&lt;/font&gt;&lt;br&gt;&lt;small&gt;文本内容&lt;/small&gt;&lt;/p&gt;
&lt;h1 id=&quot;hexo的一些命令&quot;&gt;&lt;a href=&quot;#hexo的一些命令&quot; class=&quot;headerlink&quot; title=&quot;hexo的一些命令&quot;&gt;&lt;/a&gt;hexo的一些命令&lt;/h1&gt;&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;1、hexo new “文章名称”&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:    新建一个md文件,在 hexo/source/_posts/目录下&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;2、hexo clean&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:    当source文件夹中文件改变的时候,这个操作可以清除生成的public文件夹&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;3、hexo g&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:    重新生成静态文件夹public&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;4、hexo s&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:    开启本地服务打开ttp://0.0.0.0:4000/预览&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;&lt;strong&gt;5、hexo d&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;:    部署到远程git上面, 主要是把生成的public文件夹上传到git&lt;/p&gt;
&lt;h1 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h1&gt;&lt;p&gt;使用hexo+github搭建个人博客的时候,难免遇到使用不同的电脑写博客,我是这样解决的:把博客所在的目录也使用一个git仓库存储,这样一些资源、主题的配置可以得到备份. 以后使用不同的电脑就clone下来,当然环境node、hexo、git等都是需要安装的,然后进入博客文件夹使用 npm install  之后npm install hexo-deployer-git –save来配置远程git仓库,之后就可以飞了!!!!&lt;br&gt;第一次使用markdown写这个,还是比较生疏!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;由于hexo使用的是markdown格式的文件,而我又不会使用markdown,所以第一篇微博就来学习一下markdown的使用和hexo的一些命令吧!&lt;/p&gt;
&lt;h1 id=&quot;Markdown的基本语法&quot;&gt;&lt;a href=&quot;#Markdown的基本语法&quot; class=&quot;h
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="First" scheme="http://yoursite.com/tags/First/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/07/13/hello-world/"/>
    <id>http://yoursite.com/2016/07/13/hello-world/</id>
    <published>2016-07-13T11:00:00.000Z</published>
    <updated>2016-07-13T10:27:40.000Z</updated>
    
    <content type="html">&lt;p&gt;第一次尝试搭建Hexo + Github个人博客,中间经历好多坑,终于把这个博客搭建起来了。&lt;/p&gt;
&lt;p&gt;折腾了一天半，当打开coppco.github.io的时候,有种莫名的感触,这里感谢Litten提供的主题!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;第一次尝试搭建Hexo + Github个人博客,中间经历好多坑,终于把这个博客搭建起来了。&lt;/p&gt;
&lt;p&gt;折腾了一天半，当打开coppco.github.io的时候,有种莫名的感触,这里感谢Litten提供的主题!&lt;/p&gt;

    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="First" scheme="http://yoursite.com/tags/First/"/>
    
  </entry>
  
</feed>
